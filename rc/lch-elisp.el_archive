;;; Volatile-highlights
;; Conflict with M-x shell
(require 'volatile-highlights)
(volatile-highlights-mode t)


;;; Desktop
;; Make emacs open all files in last emacs session.
;; Desktop is already part of Emacs.
;; This functionality is provided by desktop-save-mode ("feature"
;; name: "desktop"). The mode is not on by default in emacs 23, and
;; has a lot options.

;; By default, it read .emacs.desktop.lock file from the
;; dir where Emacs starts from, so when evoke Emacs from
;; FVWM by C-W-2, it reads the file from ~/.

;; Goal: have emacs always auto open the set of opend files in last
;; session, even if emacs crashed in last session or the OS crashed in
;; last session. Also, don't bother users by asking questions like "do
;; you want to save desktop?" or "do you want to override last session
;; file?", because these are annoying and terms like "session" or
;; "desktop" are confusing to most users because it can have many
;; meanings.

;; Some tech detail: set the desktop session file at
;; user-emacs-directory (default is "~/.emacs.d/.emacs.desktop").  This file
;; is our desktop file. It will be auto created and or over-written.
;; if a emacs expert has other desktop session files elsewhere, he can
;; still use or manage those.

;; Save the desktop file automatically if it already exists.
;; Use M-x desktop-save once to save the desktop, eachtime you exit Emacs
;; Or just set (desktop-save-mode 1), so Emacs will save desktop automatically.

(require 'desktop)

                                        ;(setq desktop-path '("~/.emacs.d/"))
                                        ;(setq desktop-dirname "~/.emacs.d/")
                                        ;(setq desktop-base-file-name ".emacs-desktop")

(defun desktop-settings-setup()
  (desktop-save-mode 1)
  (setq desktop-save t)
  (setq desktop-load-locked-desktop t)
  (setq desktop-dirname emacs-var-dir)
  (setq desktop-path (list emacs-var-dir))
  (if (file-exists-p (concat desktop-dirname desktop-base-file-name))
      (desktop-read desktop-dirname)))

(add-hook 'after-init-hook 'desktop-settings-setup)

;; (defun desktop-settings-setup ()
;;   "Some settings setup for desktop-save-mode."
;;   (interactive)

;;   ;; At this point the desktop.el hook in after-init-hook was
;;   ;; executed, so (desktop-read) is avoided.
;;   (when (not (eq (emacs-pid) (desktop-owner))) ; Check that emacs did not load a desktop yet
;;     ;; Here we activate the desktop mode
;;     (desktop-save-mode 1)

;;     ;; The default desktop is saved always
;;     (setq desktop-save t)

;;     ;; The default desktop is loaded anyway if it is locked
;;     (setq desktop-load-locked-desktop t)

;;     ;; Set the location to save/load default desktop
;;     (setq desktop-dirname emacs-var-dir)
;;     (setq desktop-path (list emacs-var-dir))

;;     ;; Make sure that even if emacs or OS crashed, emacs
;;     ;; still have last opened files.
;;     (add-hook 'find-file-hook
;;               (lambda ()
;;                 (run-with-timer 5 nil
;;                                 (lambda ()
;;                                   ;; Reset desktop modification time so the user is not bothered
;;                                   (setq desktop-file-modtime (nth 5 (file-attributes (desktop-full-file-name))))
;;                                   (desktop-save user-emacs-directory)))))

;;     ;; Read default desktop
;;     (if (file-exists-p (concat desktop-dirname desktop-base-file-name))
;;     (desktop-read desktop-dirname))
;;     ;; Add a hook when emacs is closed to we reset the desktop
;;     ;; modification time (in this way the user does not get a warning
;;     ;; message about desktop modifications)
;;     (add-hook 'kill-emacs-hook
;;               (lambda ()
;;                 ;; Reset desktop modification time so the user is not bothered
;;                 (setq desktop-file-modtime (nth 5 (file-attributes (desktop-full-file-name))))))
;;     )
;;   )
