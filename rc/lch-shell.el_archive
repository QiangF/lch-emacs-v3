;; -*- mode: emacs-lisp -*-
(require 'term)


;; kill buffer when terminal process is killed
(defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
  (if (memq (process-status proc) '(signal exit))
      (let ((buffer (process-buffer proc)))
        ad-do-it
        (kill-buffer buffer))
    ad-do-it))
(ad-activate 'term-sentinel)

(defun live-term-use-utf8 ()
  (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
(add-hook 'term-exec-hook 'live-term-use-utf8)

(defun live-term-paste (&optional string)
  (interactive)
  (process-send-string
   (get-buffer-process (current-buffer))
   (if string string (current-kill 0))))

(defun live-term-hook ()
  (goto-address-mode)
  (define-key term-raw-map "\C-y" 'live-term-paste))

(add-hook 'term-mode-hook 'live-term-hook)

;; rotational ansi-terms

(setq live-current-ansi-term nil)
(if (and (file-exists-p "/usr/texbin/bash") lch-mac-p)
    (setq live-ansi-terminal-path "/usr/texbin/bash"))


(defun live-ansi-term (program &optional new-buffer-name)
  "Start a terminal-emulator in a new buffer but don't switch to
it. Returns the buffer name of the newly created terminal."
  (interactive (list (read-from-minibuffer "Run program: "
                                           (or explicit-shell-file-name
                                               (getenv "ESHELL")
                                               (getenv "SHELL")
                                               "/bin/sh"))))

  ;; Pick the name of the new buffer.
  (setq term-ansi-buffer-name
        (if new-buffer-name
            new-buffer-name
          (if term-ansi-buffer-base-name
              (if (eq term-ansi-buffer-base-name t)
                  (file-name-nondirectory program)
                term-ansi-buffer-base-name)
            "ansi-term")))

  (setq term-ansi-buffer-name (concat "*" term-ansi-buffer-name "*"))

  ;; In order to have more than one term active at a time
  ;; I'd like to have the term names have the *term-ansi-term<?>* form,
  ;; for now they have the *term-ansi-term*<?> form but we'll see...

  (setq term-ansi-buffer-name (generate-new-buffer-name term-ansi-buffer-name))
  (setq term-ansi-buffer-name (term-ansi-make-term term-ansi-buffer-name program))

  (set-buffer term-ansi-buffer-name)
  (term-mode)
  (term-char-mode)

  ;; I wanna have find-file on C-x C-f -mm
  ;; your mileage may definitely vary, maybe it's better to put this in your
  ;; .emacs ...

  (term-set-escape-char ?\C-x)
  term-ansi-buffer-name)
o(defun live-ansi-terminal-buffer-names ()
  (live-filter (lambda (el) (string-match "\\*ansi-term\\.*" el)) (live-list-buffer-names)))

(defun live-show-ansi-terminal ()
  (interactive)
  (when (live-empty-p (live-ansi-terminal-buffer-names))
    (live-ansi-term live-ansi-terminal-path))

  (when (not live-current-ansi-term)
    (setq live-current-ansi-term (car (live-ansi-terminal-buffer-names))))

  (popwin:display-buffer live-current-ansi-term))

(defun live-new-ansi-terminal ()
  (interactive)
  (let* ((term-name (buffer-name (live-ansi-term live-ansi-terminal-path))))
    (setq live-current-ansi-term term-name)
    (popwin:display-buffer live-current-ansi-term)))
(global-set-key (kbd "M-3") 'live-show-ansi-terminal)
(global-set-key (kbd "M-4") 'live-new-ansi-terminal)

(defun lch-visit-term-buffer ()
  (interactive)
  (if (not (get-buffer "*ansi-term*"))
      (ansi-term "/bin/bash")
    (switch-to-buffer "*ansi-term*")))

;; Note: Emacs runs .bashrc in *shell*
;; So mac users should ln -s .profile .bashrc
(autoload 'bash-completion-dynamic-complete
  "bash-completion"
  "BASH completion hook")
(add-hook 'shell-dynamic-complete-functions
          'bash-completion-dynamic-complete)
(add-hook 'shell-command-complete-functions
          'bash-completion-dynamic-complete)

(require 'shell-command)
(shell-command-completion-mode)

;; regexp to match prompts in the inferior shell
(setq shell-prompt-pattern (concat "^" (system-name) " [^ ]+ \\[[0-9]+\\] "))

;; translate ANSI escape sequences into faces
(autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)


;;; Popup shell
;; (defvar th-shell-popup-buffer nil)

;; (defun th-shell-popup ()
;;   "Toggle a shell popup buffer with the current file's directory as cwd."
;;   (interactive)
;;   (unless (buffer-live-p th-shell-popup-buffer)
;;     (save-window-excursion (shell "*Shell*"))
;;     (setq th-shell-popup-buffer (get-buffer "*Shell*")))
;;   (let ((win (get-buffer-window th-shell-popup-buffer))
;;      (dir (file-name-directory (or (buffer-file-name)
;;                                    ;; dired
;;                                    dired-directory
;;                                    ;; use HOME
;;                                    "~/"))))
;;     (if win
;;      (delete-window win)
;;       (pop-to-buffer th-shell-popup-buffer nil t)
;;       (comint-send-string nil (concat "cd " dir "\n")))))
;; ;(global-set-key (kbd "<f1> ") 'th-shell-popup)
;; 

;; NEWSMTH
;; Not so good, keep here as an example.
;; (setq xwl-newsmth-buffer-name "newsmth")
;; (defun xwl-bbs-heartbeat ()
;;   "Keep bbs connection alive."
;;   (mapc (lambda (i)
;;           (let ((buf (get-buffer i)))
;;             (when buf
;;               (term-send-string (get-buffer-process (current-buffer)) ""))))
;;         (list xwl-newsmth-buffer-name)))

;; (defun xwl-newsmth ()
;;   (interactive)
;;   (call-interactively 'ansi-term)
;;   (rename-buffer xwl-newsmth-buffer-name)
;;   ;; set input/output coding system to gbk
;;   (set-buffer-process-coding-system 'gbk 'gbk)
;;   (term-send-string (get-buffer-process (current-buffer))
;;                     "ssh loochao@bbs.newsmth.net\n")
;;   ;; FIXME: Apart from using external "expect" utility, any elisp way to wait
;;   ;; for this?
;;   (sleep-for 3)
;;   (term-send-string (get-buffer-process (current-buffer))
;;                     (concat pwbbs "\n"))
;;   (term-send-raw)
;;   (run-at-time t 120 'xwl-bbs-heartbeat))

;; (define-key global-map (kbd "<f2> 4") '(lambda ()
;;                                  (interactive)
;;                                  (xwl-switch-or-create xwl-newsmth-buffer-name 'xwl-newsmth)))
